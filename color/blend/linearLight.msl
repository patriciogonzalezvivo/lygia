#include "linearDodge.msl"
#include "linearBurn.msl"

/*
contributors: Jamie Owen
description: Photoshop Linear Light blend mode mplementations sourced from this article on https://mouaif.wordpress.com/2009/01/05/photoshop-math-with-glsl-shaders/
use: blendLinearLigth(<float|float3> base, <float|float3> blend [, <float> opacity])
license: MIT License (MIT) Copyright (c) 2015 Jamie Owen
*/

#ifndef FNC_BLENDLINEARLIGHT
#define FNC_BLENDLINEARLIGHT
float blendLinearLight(float base, float blend) {
  return blend < .5? blendLinearBurn(base, float(2. * blend)): blendLinearDodge(base, float(2. * (blend- .5)));
}

float3 blendLinearLight(float3 base, float3 blend) {
  return float3(blendLinearLight(base.r, blend.r),
              blendLinearLight(base.g, blend.g),
              blendLinearLight(base.b, blend.b));
}

float3 blendLinearLight(float3 base, float3 blend, float opacity) {
    return (blendLinearLight(base, blend) * opacity + base * (1. - opacity));
}

half blendLinearLight(half base, half blend) {
  return blend < .5? blendLinearBurn(base, half(2. * blend)): blendLinearDodge(base, half(2. * (blend- .5)));
}

half3 blendLinearLight(half3 base, half3 blend) {
  return half3(blendLinearLight(base.r, blend.r),
              blendLinearLight(base.g, blend.g),
              blendLinearLight(base.b, blend.b));
}

half3 blendLinearLight(half3 base, half3 blend, half opacity) {
    return (blendLinearLight(base, blend) * opacity + base * (1. - opacity));
}
#endif
