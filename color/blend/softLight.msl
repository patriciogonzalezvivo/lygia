/*
contributors: Jamie Owen
description: Photoshop Soft Light blend mode mplementations sourced from this article on https://mouaif.wordpress.com/2009/01/05/photoshop-math-with-glsl-shaders/
use: blendSoftLight(<float|float3> base, <float|float3> blend [, <float> opacity])
*/

#ifndef FNC_BLENDSOFTLIGHT
#define FNC_BLENDSOFTLIGHT
float blendSoftLight(float base, float blend) {
    return (blend < .5)? (2. * base * blend + base * base * (1. - 2.*blend)): (sqrt(base) * (2. * blend - 1.) + 2. * base * (1. - blend));
}

float3 blendSoftLight(float3 base, float3 blend) {
    return float3(blendSoftLight(base.r, blend.r),
                blendSoftLight(base.g, blend.g),
                blendSoftLight(base.b, blend.b));
}

float4 blendSoftLight(float4 base, float4 blend) {
    return float4(blendSoftLight( base.r, blend.r ),
                blendSoftLight( base.g, blend.g ),
                blendSoftLight( base.b, blend.b ),
                blendSoftLight( base.a, blend.a )
    );
}

float3 blendSoftLight(float3 base, float3 blend, float opacity) {
    return (blendSoftLight(base, blend) * opacity + base * (1. - opacity));
}

half blendSoftLight(half base, half blend) {
    return (blend < .5)? (2. * base * blend + base * base * (1. - 2.*blend)): (sqrt(base) * (2. * blend - 1.) + 2. * base * (1. - blend));
}

half3 blendSoftLight(half3 base, half3 blend) {
    return half3(blendSoftLight(base.r, blend.r),
                blendSoftLight(base.g, blend.g),
                blendSoftLight(base.b, blend.b));
}

half4 blendSoftLight(half4 base, half4 blend) {
    return half4(blendSoftLight( base.r, blend.r ),
                blendSoftLight( base.g, blend.g ),
                blendSoftLight( base.b, blend.b ),
                blendSoftLight( base.a, blend.a )
    );
}

half3 blendSoftLight(half3 base, half3 blend, half opacity) {
    return (blendSoftLight(base, blend) * opacity + base * (1. - opacity));
}
#endif
